<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:sch="http://www.ascc.net/xml/schematron">
	<xs:annotation>
		<xs:documentation>
********************************************************************************
Author: Initial development by Lloyd McKenzie, Dec. 2002
(c) 2002, 2003 by HL7 Inc.

Purpose:
	Defines the available text markup for use in various descriptive elements in various artifacts.
	The contents of this schema are owned and defined by the publishing committee.  I.e. They decide what sorts of markup are allowed

Modification History:
	2003-01-23: Revamped 'graphic' markup element to be renamed figure, and to have support for fixed and scalable images.
	2003-01-28: Fixed graphic width to be optional
	2003-02-07: Modified property restriction to allow restriction of non-named properties
	2003-03-18: Added domainNameType as a separate type to handle x_domains
			- Changed upperCamelCaseType to support underscores to allow for proper choice names.  (We may want to revisit this.)
			- Removed the 'hide' markup element.  (If you don't want something, keep a copy or comment it out.)
			- Added references for dynamicModel, storyboardModel, ITS and communicationProtocol
	2003-03-23: Changed domainRef to vocabularyDomainRef and added vocabularyCodeRef and codeSystemRef
	2003-05-10: Defined references for vocabularyModels, datatypeModels and Glossaries
	2003-05-15: Moved stuff around because Spy defect has been fixed
			- Added artifactGroupRef to list of references

Outstanding questions:
  - Should we have a rule for 'indent', 'div' and/or 'listType' restricting the nesting depth of lists?  (E.g. Can you have a list of lists of lists of lists of . . .)
  - Should we make graphic height and width mandatory?

Programatic rules (rules that apply but are not schema or schematron-enforced):
  - Ensure that datatypes are restricted to a list of defined datatypes
  - Ensure that datatypes which are supposed to have parameters do in fact have parameter types, and those parameters are restrictions of the appropriate type as specified in the datatype definition
  - All items that are 'referenced' must actually exist
  - All items defined as an 'artifactIdType' must be globally unique.  (I.e. there can not be more than one item with a given number defined within a given package hierarchy.)
********************************************************************************
		</xs:documentation>
		<xs:appinfo>
			<sch:pattern name="">
				<sch:rule abstract="true" id="headerRule">
					<sch:report test="count(ancestor-or-self::*/header)=0">
						ERROR: This element or one of it's ancestors must have a header defined.</sch:report>
				</sch:rule>
			</sch:pattern>
		</xs:appinfo>
	</xs:annotation>
	<!-- Note: when this schema gets split, this include moves into the second schema -->
	<xs:include schemaLocation="mifPatternTypes.xsd"/>
	<!-- NOTE: We could define these groups by 'ref'erencing the other groups.  However, spy has a bug (#1779) that causes validation problems with mixed content when you do this. -->
	<xs:group name="formatMarkupGroup">
		<xs:annotation>
			<xs:documentation>Markup focusing solely on the appearance of the text, appropriate for labels and titles.</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="b" type="nonEmptyStringType">
				<xs:annotation>
					<xs:documentation>The contained content will appear as bolded text</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="i" type="xs:string">
				<xs:annotation>
					<xs:documentation>The contained content will appear as italicized text</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="code" type="nonEmptyStringType">
				<xs:annotation>
					<xs:documentation>Information that is to be highlighted in non-proportional font.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:group>
	<xs:group name="pubSimpleMarkupGroup">
		<xs:annotation>
			<xs:documentation>A choice of elements that may only contain simple string content (no markup).</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="sup" type="formatMarkupType">
				<xs:annotation>
					<xs:documentation>Content that should appear in a smaller font, slightly above the surrounding text.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="sub" type="formatMarkupType">
				<xs:annotation>
					<xs:documentation>Content that should appear in a smaller font, slightly below the surrounding text.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="pre">
				<xs:annotation>
					<xs:documentation>Indicates that the contained content should not have its spacing adjusted.  NOTE: This element can technically contain markup elements.  However, they will be treated as non-markup and will be displayed, not processed.</xs:documentation>
				</xs:annotation>
				<xs:complexType mixed="true">
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:any processContents="skip"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="footnote" type="fullMarkupType">
				<xs:annotation>
					<xs:documentation>Supporting content that should be referenced within the document, but displayed at the end of the page or document section.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:group ref="formatMarkupGroup"/>
		</xs:choice>
	</xs:group>
	<xs:group name="pubReferenceMarkupGroup">
		<xs:annotation>
			<xs:documentation>A choice of elements that reference other artifacts or markup elements.</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="externalRef">
				<xs:annotation>
					<xs:documentation>Used to reference an external document or item by URL.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="ref" type="urlType" use="required">
						<xs:annotation>
							<xs:documentation>The URL where the document or item can be found.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="alt" type="longDescriptiveNameType" use="optional">
						<xs:annotation>
							<xs:documentation>The descriptive name for the document or item.  If not specified, the description will be the URL itself.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="extSpecRef">
				<xs:annotation>
					<xs:documentation>A reference to a defined artifact from an external specification</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="spec" type="shortDescriptiveNameType" use="required">
						<xs:annotation>
							<xs:documentation>The name of the referenced specification.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="version" type="versionType" use="optional">
						<xs:annotation>
							<xs:documentation>The version number of the referenced specification.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="ref" type="urlType" use="optional">
						<xs:annotation>
							<xs:documentation>The URL where the referenced artifact can be found.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="figureRef">
				<xs:annotation>
					<xs:documentation>A reference to a graphic image defined within the document or in an external document.</xs:documentation>
					<xs:appinfo>
						<sch:pattern name="Validate figureRef markup">
							<sch:rule context="figureRef">
								<sch:report test="not(//figure[@id=current()/@id])">
									ERROR: No figure with the specified id exists within this document.</sch:report>
								<!-- Can't use keyref because we don't know what the root node is going to be. -->
							</sch:rule>
						</sch:pattern>
					</xs:appinfo>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="id" type="basicIdType" use="required">
						<xs:annotation>
							<xs:documentation>The identifier assigned to the figure being referenced.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="tableRef">
				<xs:annotation>
					<xs:documentation>A reference to a table defined within the document .</xs:documentation>
					<xs:appinfo>
						<sch:pattern name="Validate tableRef markup">
							<sch:rule context="tableRef">
								<sch:report test="not(//table[@id=current()/@id])">
									ERROR: No table with the specified id exists within this document.</sch:report>
								<!-- Can't use keyref because we don't know what the root node is going to be. -->
							</sch:rule>
						</sch:pattern>
					</xs:appinfo>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="id" type="basicIdType" use="required">
						<xs:annotation>
							<xs:documentation>The identifier assigned to the table being referenced.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:choice>
	</xs:group>
	<xs:group name="pubComplexMarkupGroup">
		<xs:annotation>
			<xs:documentation>A choice of elements that can themselves contain markup.</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="div">
				<xs:annotation>
					<xs:documentation>Identifies a section of related content under a particular title.</xs:documentation>
				</xs:annotation>
				<xs:complexType mixed="true">
					<xs:group ref="fullMarkupGroup" minOccurs="0" maxOccurs="unbounded"/>
					<xs:attribute name="title" type="shortDescriptiveNameType" use="required">
						<xs:annotation>
							<xs:documentation>Identifies the heading name for the section</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="numberSectionInd" type="xs:boolean" use="optional" default="true">
						<xs:annotation>
							<xs:documentation>If false, indicates that this section should not be assigned a number or appear in the table of contents.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="p" type="fullMarkupType">
				<xs:annotation>
					<xs:documentation>Contained content is a separate paragraph.  If appearing as an empty element, forces a line-break</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="ol" type="listType">
				<xs:annotation>
					<xs:documentation>The content will consist of a set of list items where each item is labeled with a number (starting with 1)</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="ul" type="listType">
				<xs:annotation>
					<xs:documentation>The content will consist of a set of list items where each item is labeled with a bullet</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="note" type="basicMarkupType">
				<xs:annotation>
					<xs:documentation>Information that is to be highlighted as a Note.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="indent" type="fullMarkupType">
				<xs:annotation>
					<xs:documentation>Identifies content that should be left-indented from the surrounding text.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="figure">
				<xs:annotation>
					<xs:documentation>A graphic image to be inserted into the document.</xs:documentation>
					<xs:appinfo>
						<sch:pattern name="Validate figure markup">
							<sch:rule context="figure">
								<sch:report test="@id and count(preceding::figure[@id=current()/@id])">
									ERROR: Figure id must be unique within the document, if specified.</sch:report>
								<!-- Can't use unique because we don't know what the root node is going to be. -->
							</sch:rule>
						</sch:pattern>
					</xs:appinfo>
				</xs:annotation>
				<xs:complexType mixed="true">
					<xs:complexContent mixed="true">
						<xs:extension base="imageType">
							<xs:sequence>
								<xs:element name="caption" type="basicMarkupType" minOccurs="0">
									<xs:annotation>
										<xs:documentation>Descriptive text to be associated with the graphic image.</xs:documentation>
									</xs:annotation>
								</xs:element>
							</xs:sequence>
							<xs:attribute name="id" type="basicIdType" use="optional">
								<xs:annotation>
									<xs:documentation>An identifier for the figure (unique within the document) that can be used to reference the figure.  NOTE: The figure id will not necessarily be the number/letter/identifier displayed for the figure in documentation.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
						</xs:extension>
					</xs:complexContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="table">
				<xs:annotation>
					<xs:documentation>Used when the contained content should be represented as a table.</xs:documentation>
					<xs:appinfo>
						<sch:pattern name="Validate table markup">
							<sch:rule context="table">
								<sch:report test="@id and count(preceding::table[@id=current()/@id])">
									ERROR: Table id must be unique within the document, if specified.</sch:report>
								<!-- Can't use unique because we don't know what the root node is going to be. -->
							</sch:rule>
						</sch:pattern>
					</xs:appinfo>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="caption" type="nonEmptyStringType" minOccurs="0">
							<xs:annotation>
								<xs:documentation>The text of the caption that should appear above the table</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="col" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>Defines the columns for the table.  If not specified, columns will be autosized.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:attribute name="width" type="xs:decimal" use="required">
									<xs:annotation>
										<xs:documentation>Identifies the horizontal size of the column in inches.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
							</xs:complexType>
						</xs:element>
						<xs:element name="thead" minOccurs="0">
							<xs:annotation>
								<xs:documentation>Defines the contents of the table header row.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="tr">
										<xs:annotation>
											<xs:documentation>The row containing the table header labels</xs:documentation>
										</xs:annotation>
										<xs:complexType>
											<xs:sequence>
												<xs:element name="th" type="basicMarkupType" maxOccurs="unbounded">
													<xs:annotation>
														<xs:documentation>Represents the heading for one of the table columns</xs:documentation>
													</xs:annotation>
												</xs:element>
											</xs:sequence>
										</xs:complexType>
									</xs:element>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						<xs:element name="tbody">
							<xs:annotation>
								<xs:documentation>Contains the information of the table.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="tr" maxOccurs="unbounded">
										<xs:annotation>
											<xs:documentation>Represents a row within the table</xs:documentation>
										</xs:annotation>
										<xs:complexType>
											<xs:sequence>
												<xs:element name="td" type="basicMarkupType" maxOccurs="unbounded">
													<xs:annotation>
														<xs:documentation>Represents the data within one cell of the table</xs:documentation>
													</xs:annotation>
												</xs:element>
											</xs:sequence>
										</xs:complexType>
									</xs:element>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
					<xs:attribute name="id" type="basicIdType" use="optional">
						<xs:annotation>
							<xs:documentation>A unique identifier for the table within the document.  Used when referencing a table with <tableRef/>.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="constructedElement">
				<xs:annotation>
					<xs:documentation>This is a cue to the publications process to auto-generate some form of construct such as a summary table, cross reference table or artifact at a certain place in the publication.  It may *only* be used with the pre-approval of the publications group.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="elementType" use="required">
						<xs:annotation>
							<xs:documentation>Indicates the type of element to construct.</xs:documentation>
						</xs:annotation>
						<xs:simpleType>
							<xs:restriction base="enumeratedCodeType">
								<xs:enumeration value="DatatypeSummary">
									<xs:annotation>
										<xs:documentation>A summary table of the primary datatypes.</xs:documentation>
									</xs:annotation>
								</xs:enumeration>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:choice>
	</xs:group>
	<!-- Sub-types that are used within the markup and subsequent schemas -->
	<xs:complexType name="listType">
		<xs:annotation>
			<xs:documentation>Used in defining all types of lists.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="li" type="fullMarkupType" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>The content will appear as a separate item within a list</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="imageType" mixed="true">
		<xs:annotation>
			<xs:documentation>Used for all references to graphic figures</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:sequence>
				<xs:element name="pixmap" type="fixedImageType">
					<xs:annotation>
						<xs:documentation>A fixed-size image.  This is the 'primary' image for the figure.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="thumbnail" type="fixedImageType" minOccurs="0">
					<xs:annotation>
						<xs:documentation>A small rendition of the pixmap image intended to be used as a place-holder (often with a hyperlink to the larger pixmap image) when space constraints prevent the display of the full-size image.</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
			<xs:element name="resizable">
				<xs:annotation>
					<xs:documentation>A resizable image definition that can be scaled as necessary for display purposes.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="href" type="localFileReferenceType" use="required">
						<xs:annotation>
							<xs:documentation>A reference to the relative file name and location of the resizable image.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="type" use="required">
						<xs:annotation>
							<xs:documentation>Identifies the type of image being represented.  Necessary to allow for proper image scaling.</xs:documentation>
						</xs:annotation>
						<xs:simpleType>
							<xs:restriction base="xs:token">
								<xs:enumeration value="application/postscript">
									<xs:annotation>
										<xs:documentation>A post-script image.</xs:documentation>
									</xs:annotation>
								</xs:enumeration>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="recommendedHeight" use="optional">
						<xs:annotation>
							<xs:documentation>The suggested vertical size at which the image should be rendered (in inches).</xs:documentation>
						</xs:annotation>
						<xs:simpleType>
							<xs:restriction base="xs:decimal">
								<xs:minExclusive value="0"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="recommendedWidth" use="optional">
						<xs:annotation>
							<xs:documentation>The suggested horizontal size at which the image should be rendered (in inches).</xs:documentation>
						</xs:annotation>
						<xs:simpleType>
							<xs:restriction base="xs:decimal">
								<xs:minExclusive value="0"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="fixedImageType">
		<xs:attribute name="href" type="localFileReferenceType" use="required">
			<xs:annotation>
				<xs:documentation>A reference to the relative file name and location of the fixed image.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="height" use="optional">
			<xs:annotation>
				<xs:documentation>The vertical size of the fixed image (in inches).</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:decimal">
					<xs:minExclusive value="0"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="width" use="optional">
			<xs:annotation>
				<xs:documentation>The horizontal size of the fixed image (in inches).</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:decimal">
					<xs:minExclusive value="0"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	<!-- ***********************************************************************************************
	- The following content should be split into a separate schema, but can't until SPY fixes a bug
	- (Spy doesn't allow valid redefines of groups, which we need to do.)
	- *********************************************************************************************** -->
	<xs:complexType name="fullMarkupType" mixed="true">
		<xs:annotation>
			<xs:documentation>Full-blown markup including formating, paragraphs and structural markup (lists and subdivisions).</xs:documentation>
		</xs:annotation>
		<xs:group ref="fullMarkupGroup" minOccurs="0" maxOccurs="unbounded"/>
	</xs:complexType>
	<xs:complexType name="basicMarkupType" mixed="true">
		<xs:annotation>
			<xs:documentation>Basic formatting markup and paragraphs but no structural markup (lists and subdivisions)</xs:documentation>
		</xs:annotation>
		<xs:group ref="basicMarkupGroup" minOccurs="0" maxOccurs="unbounded"/>
	</xs:complexType>
	<xs:complexType name="formatMarkupType" mixed="true">
		<xs:annotation>
			<xs:documentation>Formatting markup only.  No paragraphs or structural markup.</xs:documentation>
		</xs:annotation>
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:group ref="formatMarkupGroup"/>
		</xs:choice>
	</xs:complexType>
	<xs:group name="artifactReferenceMarkupGroup">
		<xs:annotation>
			<xs:documentation>A choice of elements that reference other artifacts.</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="itemName">
				<xs:annotation>
					<xs:documentation>A reference to the name of the containing element of the specified type.  This element should be used instead of the name of the element to minimize the number of changes necessary if a name should change.  E.g. In a definition you might say "A <itemName/> is used when . . ."</xs:documentation>
					<xs:appinfo>
						<sch:pattern name="Validate itemName markup">
							<sch:rule context="itemName">
								<sch:report test="(@type='datatype' and not(ancestor::datatypeDefinition)) or
												(@type='property' and not(ancestor::property)) or
												(@type='class' and not(ancestor::class)) or
												(@type='attribute' and not(ancestor::attribute)) or
												(@type='relationship' and not(ancestor::relationship)) or
												(@type='trigger' and not(ancestor::triggerEvent)) or
												(@type='appRole' and not(ancestor::applicationRole))">
									ERROR: There is no ancestor of the specified type.</sch:report>
								<sch:report test="not(@type) and (not(ancestor::datatypeDefinition or ancestor::property or ancestor::class or ancestor::attribute or
												ancestor::relationship or ancestor::triggerEvent or ancestor::applicationRole))">
									ERROR: There is no ancestor of an appropriate type having a name.</sch:report>
							</sch:rule>
						</sch:pattern>
					</xs:appinfo>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="type" use="optional">
						<xs:annotation>
							<xs:documentation>Identifies the type of containing element the name is a reference for.  If there are multiple containing elements of the same type, the referenced name will be the nearest one.  If not specified, then the nearest eligible containing element will be used.</xs:documentation>
						</xs:annotation>
						<xs:simpleType>
							<xs:restriction base="enumeratedCodeType">
								<xs:enumeration value="datatype">
									<xs:annotation>
										<xs:documentation>A 'datatypeDefinition' element</xs:documentation>
									</xs:annotation>
								</xs:enumeration>
								<xs:enumeration value="property">
									<xs:annotation>
										<xs:documentation>A datatype 'property' element</xs:documentation>
									</xs:annotation>
								</xs:enumeration>
								<xs:enumeration value="class">
									<xs:annotation>
										<xs:documentation>A 'class' element</xs:documentation>
									</xs:annotation>
								</xs:enumeration>
								<xs:enumeration value="attribute">
									<xs:annotation>
										<xs:documentation>A class 'attribute' element</xs:documentation>
									</xs:annotation>
								</xs:enumeration>
								<xs:enumeration value="relationship">
									<xs:annotation>
										<xs:documentation>A class 'relationship' element</xs:documentation>
									</xs:annotation>
								</xs:enumeration>
								<xs:enumeration value="trigger">
									<xs:annotation>
										<xs:documentation>A 'triggerEvent' element</xs:documentation>
									</xs:annotation>
								</xs:enumeration>
								<xs:enumeration value="appRole">
									<xs:annotation>
										<xs:documentation>An 'applicationRole' element</xs:documentation>
									</xs:annotation>
								</xs:enumeration>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="artifactGroupRef">
				<xs:annotation>
					<xs:documentation>A reference to a particular grouping of artifacts.</xs:documentation>
				</xs:annotation>
				<xs:complexType mixed="true">
					<xs:complexContent mixed="true">
						<xs:extension base="basicMarkupType">
							<xs:attribute name="type" use="required">
								<xs:annotation>
									<xs:documentation>Identifies the type of artifact group being referenced.  Used in circumstances where there is not a model or other artifact that contains only the specified type of item.  NOTE: This should only be used with the approval of the publications committee.  (They will decide what 'groups' of things will actually be portrayed as groups)</xs:documentation>
								</xs:annotation>
								<xs:simpleType>
									<xs:restriction base="xs:NMTOKEN">
										<xs:enumeration value="Footnotes">
											<xs:annotation>
												<xs:documentation>A reference to all of the footnotes defined within the artifact.</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="Packages">
											<xs:annotation>
												<xs:documentation>A reference to all of the packages defined within the artifact.  Only applies to packages.</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="Header">
											<xs:annotation>
												<xs:documentation>A reference to the header information associated with the artifact.</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="Annotations">
											<xs:annotation>
												<xs:documentation>A reference to all of the annotations defined within the artifact.</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="History">
											<xs:annotation>
												<xs:documentation>A reference to all of the history associated with the artifact.</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="Derivation">
											<xs:annotation>
												<xs:documentation>A reference to all of the derivations associated with the artifact.</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="Properties">
											<xs:annotation>
												<xs:documentation>A reference to all of the properties within the artifact.  (Only applies to DatatypeDefinitions.)</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="StaticModels">
											<xs:annotation>
												<xs:documentation>A reference to all of the static models defined within the artifact.  (Only applies to Packages.)</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="SubjectAreas">
											<xs:annotation>
												<xs:documentation>A reference to all of the subject areas defined within the artifact.  (Only applies to static models.)</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="Classes">
											<xs:annotation>
												<xs:documentation>A reference to all of the classes defined within the artifact.  (Only applies to static models.)</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="StateEngines">
											<xs:annotation>
												<xs:documentation>A reference to all of the state engines defined within the artifact.  (Only applies to static models.)</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="States">
											<xs:annotation>
												<xs:documentation>A reference to all of the states defined within the class.  (Only applies to classes within static models.)</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="StateTransitions">
											<xs:annotation>
												<xs:documentation>A reference to all of the state transitions defined within the class.  (Only applies to classes within static models.)</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="Associations">
											<xs:annotation>
												<xs:documentation>A reference to all of the associations defined within the class.  (Only applies to classes within static models.)</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="Attributes">
											<xs:annotation>
												<xs:documentation>A reference to all of the attributes defined within the class.  (Only applies to classes within static models.)</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="TriggerEvents">
											<xs:annotation>
												<xs:documentation>A reference to all of the trigger events defined within the artifact.  (Only applies to dynamic models.)</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="ApplicationRoles">
											<xs:annotation>
												<xs:documentation>A reference to all of the application roles defined within the artifact.  (Only applies to dynamic models.)</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="Interactions">
											<xs:annotation>
												<xs:documentation>A reference to all of the interactions defined within the artifact.  (Only applies to dynamic models.)</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="ReceiverResponsibilities">
											<xs:annotation>
												<xs:documentation>A reference to all of the xxx defined within the artifact.  (Only applies to interactions.)</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="VocabularyDomains">
											<xs:annotation>
												<xs:documentation>A reference to all of the vocabulary domains defined within the artifact.  (Only applies to vocabulary models.)</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="VocabularyCodes">
											<xs:annotation>
												<xs:documentation>A reference to all of the vocabulary codes defined within the artifact.  (Only applies to vocabulary models.)</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="Templates">
											<xs:annotation>
												<xs:documentation>A reference to all of the templates defined within the artifact.  (Only applies to packages.)</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="CommunicationProtocols">
											<xs:annotation>
												<xs:documentation>A reference to all of the communication protocols defined within the artifact.  (Only applies to packages.)</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="ImplementationTechnologySpecifications">
											<xs:annotation>
												<xs:documentation>A reference to all of the implementation technology specifications defined within the artifact.  (Only applies to implementation technology specifications.)</xs:documentation>
											</xs:annotation>
										</xs:enumeration>
									</xs:restriction>
								</xs:simpleType>
							</xs:attribute>
							<xs:attribute name="linkToEnd" type="xs:boolean" use="optional" default="false">
								<xs:annotation>
									<xs:documentation>If true, indicates that the link should be to the first item following the specified group.  If false, the link is to the begining of the group.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="withinArtifactId" type="artifactIdType" use="optional">
								<xs:annotation>
									<xs:documentation>Indicates the name of the artifact within which to link to the group.  For example, link to the 'classes' section in static model 'X'.  If not specified, the link will be to the nearest ancestor artifact that contains the specified type of group.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="withinClassName" type="formalProperNameType" use="optional">
								<xs:annotation>
									<xs:documentation>Indicates the name of the class within which to link to the group.  For example, link to the 'attributes' section in class 'A' static model 'B'.  If not specified, the link will be to the nearest ancestor artifact that contains the specified type of group.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
						</xs:extension>
					</xs:complexContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="packageRef">
				<xs:annotation>
					<xs:documentation>A reference to a section or package defined within the document or in an external document.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="basicFormalNameType" use="required">
						<xs:annotation>
							<xs:documentation>The name of the section or package being referenced.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element ref="datatypeModelRef"/>
			<xs:element ref="datatypeRef"/>
			<xs:element name="propertyRef">
				<xs:annotation>
					<xs:documentation>A reference to a datatype property defined within the document or in an external document.</xs:documentation>
					<xs:appinfo>
						<sch:pattern name="Check datatype property reference constraints">
							<sch:rule context="propertyRef">
								<sch:report test="@propertyName and count(conversionDatatype)!=0">
									ERROR: A property reference may only have a name or a conversion datatype, not both.</sch:report>
								<sch:report test="not(@propertyName) and count(conversionDatatype)=0">
									ERROR: A property reference must have either a name or a conversion datatype.</sch:report>
							</sch:rule>
						</sch:pattern>
					</xs:appinfo>
				</xs:annotation>
				<xs:complexType>
					<xs:complexContent>
						<xs:extension base="datatypeType">
							<xs:sequence>
								<xs:element name="conversionDatatype" type="datatypeType" minOccurs="0">
									<xs:annotation>
										<xs:documentation>For 'conversion' properties, identifies the target datatype for the conversion.</xs:documentation>
									</xs:annotation>
								</xs:element>
							</xs:sequence>
							<xs:attribute name="propertyName" type="formalPropertyNameType" use="optional">
								<xs:annotation>
									<xs:documentation>The name of the property being referenced.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
						</xs:extension>
					</xs:complexContent>
				</xs:complexType>
			</xs:element>
			<xs:element ref="staticModelRef"/>
			<xs:element name="subjectAreaRef">
				<xs:annotation>
					<xs:documentation>A reference to a defined subject area within a particular model.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="modelId" type="artifactIdType" use="required">
						<xs:annotation>
							<xs:documentation>The identifier of the model containing the subject area being referenced.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="subjectAreaName" type="basicFormalNameType" use="required">
						<xs:annotation>
							<xs:documentation>The name of the subject area being referenced.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="classRef">
				<xs:annotation>
					<xs:documentation>A reference to a defined class within a particular model.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="modelId" type="artifactIdType" use="required">
						<xs:annotation>
							<xs:documentation>The identifier of the model containing the class being referenced.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="className" type="allClassNameType" use="required">
						<xs:annotation>
							<xs:documentation>The name of the class being referenced.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element ref="stateTransitionRef"/>
			<xs:element name="stateRef">
				<xs:annotation>
					<xs:documentation>Identifies a state that is associated with the trigger event.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="staticModelId" type="artifactIdType" use="required">
						<xs:annotation>
							<xs:documentation>Identifies the data model from which the state transition is drawn.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="className" type="formalProperNameType" use="required">
						<xs:annotation>
							<xs:documentation>Identifies the 'focal' class for the state transition.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="stateName" type="formalPropertyNameType" use="required">
						<xs:annotation>
							<xs:documentation>The name of the state within the 'focal' class.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="attributeRef">
				<xs:annotation>
					<xs:documentation>A reference to a defined attribute within a particular model and class.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="modelId" type="artifactIdType" use="required">
						<xs:annotation>
							<xs:documentation>The identifier of the model containing the attribute being referenced.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="className" type="allClassNameType" use="required">
						<xs:annotation>
							<xs:documentation>The name of the class containing the attribute being referenced.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="attributeName" type="formalPropertyNameType" use="required">
						<xs:annotation>
							<xs:documentation>The name of the attribute being referenced.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="associationEndRef">
				<xs:annotation>
					<xs:documentation>A reference to a defined relationship within a particular model and class.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="modelId" type="artifactIdType" use="required">
						<xs:annotation>
							<xs:documentation>The identifier of the model containing the relationship being referenced.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="className" type="allClassNameType" use="required">
						<xs:annotation>
							<xs:documentation>The name of the class containing the relationship being referenced.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="relationshipName" type="formalPropertyNameType" use="required">
						<xs:annotation>
							<xs:documentation>The name of the relationship being referenced.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element ref="storyboardModelRef"/>
			<xs:element ref="storyboardRef"/>
			<xs:element ref="dynamicModelRef"/>
			<xs:element name="triggerEventRef" type="triggerEventRefType">
				<xs:annotation>
					<xs:documentation>A reference to a defined trigger event.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="applicationRoleRef" type="applicationRoleRefType">
				<xs:annotation>
					<xs:documentation>A reference to a defined application role.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="interactionRef" type="interactionRefType">
				<xs:annotation>
					<xs:documentation>A reference to a defined interaction.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="vocabularyModelRef"/>
			<xs:element ref="vocabularyDomainRef"/>
			<xs:element ref="codeSystemRef"/>
			<xs:element ref="vocabularyCodeRef"/>
			<xs:element ref="glossaryRef"/>
			<xs:element ref="glossaryTermRef"/>
			<xs:element ref="templateRef"/>
			<xs:element ref="itsRef"/>
			<xs:element name="communicationProtocolRef">
				<xs:annotation>
					<xs:documentation>A reference to a defined communication protocol.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="id" type="artifactIdType" use="required">
						<xs:annotation>
							<xs:documentation>Identifier for the referenced protocol.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:choice>
	</xs:group>
	<xs:group name="referenceMarkupGroup">
		<xs:annotation>
			<xs:documentation>A choice of elements that reference other artifacts or markup elements.</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:group ref="pubReferenceMarkupGroup"/>
			<xs:group ref="artifactReferenceMarkupGroup"/>
		</xs:choice>
	</xs:group>
	<xs:group name="basicMarkupGroup">
		<xs:annotation>
			<xs:documentation>Markup focusing solely on the appearance of the text.</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<!--xs:element name="p" type="basicMarkupType">
				<xs:annotation>
					<xs:documentation>Contained content is a separate paragraph.  If appearing as an empty element, forces a line-break</xs:documentation>
				</xs:annotation>
			</xs:element-->
			<xs:group ref="pubSimpleMarkupGroup"/>
			<xs:group ref="referenceMarkupGroup"/>
		</xs:choice>
	</xs:group>
	<xs:group name="fullMarkupGroup">
		<xs:annotation>
			<xs:documentation>A choice of all available markup types, including structural markup.</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:group ref="pubSimpleMarkupGroup"/>
			<xs:group ref="referenceMarkupGroup"/>
			<xs:group ref="pubComplexMarkupGroup"/>
		</xs:choice>
	</xs:group>
	<!-- Sub-types that are used within the markup and subsequent schemas -->
	<xs:complexType name="artifactReferenceType">
		<xs:attribute name="artifactId" type="artifactIdType" use="required">
			<xs:annotation>
				<xs:documentation>The identifier of the referenced artifact.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<!--
	   - The complex types are defined for applicationRole, triggerEvent and interaction because they are extended by conformance profiles
	   -->
	<xs:complexType name="triggerEventRefType">
		<xs:complexContent>
			<xs:extension base="artifactReferenceType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="applicationRoleRefType">
		<xs:complexContent>
			<xs:extension base="artifactReferenceType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="interactionRefType">
		<xs:complexContent>
			<xs:extension base="artifactReferenceType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="datatypeType">
		<xs:sequence>
			<xs:element name="datatype" type="datatypeType" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>For 'extension' datatypes, this indicates the datatype(s) that are being extended by a parameterized type.  For datatypes taking multiple parameters, the order is the same as that specified in the datatype definition.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="name" use="required">
			<xs:annotation>
				<xs:documentation>The formal name of the datatype.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:maxLength value="20"/>
					<xs:pattern value="[A-Z]+|([A-Z]+.)?diff"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<!-- Defined as a separate type because it recurses -->
	</xs:complexType>
	<xs:simpleType name="datatypePropertyKindType">
		<xs:restriction base="enumeratedCodeType">
			<xs:enumeration value="conversion">
				<xs:annotation>
					<xs:documentation>The property exposes the datatype as converted into a more complex or simpler datatype by defaulting properties of the new datatype and/or constraining the properties of the original datatype.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="fixedProperty">
				<xs:annotation>
					<xs:documentation>A property whose value does not change from instance to instance because it has been pre-constrained.  Fixed properties do not generally need to b exposed for communication or persistance using an ITS.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="variableProperty">
				<xs:annotation>
					<xs:documentation>A property whose value may vary from instance to instance.  Variable properties will need to be comunicated or persisted by an ITS unless they can be inferred from the value of other properties.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:element name="datatypeRef" type="datatypeType">
		<xs:annotation>
			<xs:documentation>A reference to a datatype defined within the document or in an external document.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="storyboardRef" type="artifactReferenceType">
		<xs:annotation>
			<xs:documentation>A reference to a defined storyboard.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="stateTransitionRef">
		<xs:annotation>
			<xs:documentation>Identifies a state transition defined elsewhere.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="staticModelId" type="artifactIdType" use="required">
				<xs:annotation>
					<xs:documentation>Identifies the data model from which the state transition of the trigger event is drawn.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="className" type="formalProperNameType" use="required">
				<xs:annotation>
					<xs:documentation>Identifies the 'focal' class for the state transition of the trigger event.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="stateTransitionName" type="formalPropertyNameType" use="required">
				<xs:annotation>
					<xs:documentation>The name of the state transition within the 'focal' class that is the basis for the trigger event.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="glossaryTermRef">
		<xs:annotation>
			<xs:documentation>A reference to a glossary term.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="termName" type="shortDescriptiveNameType" use="required">
				<xs:annotation>
					<xs:documentation>Name of the referenced term.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="glossaryId" type="artifactIdType" use="optional">
				<xs:annotation>
					<xs:documentation>If specified, identifies the glossary from which the term is to be referenced.  If not specified, the term will be referenced from the nearest package on the 'ancestor' tree which as a glossary containing the term.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="glossaryRef">
		<xs:annotation>
			<xs:documentation>A reference to a glossary.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="id" type="artifactIdType" use="required">
				<xs:annotation>
					<xs:documentation>The identifier of the glossary being referenced.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="itsRef">
		<xs:annotation>
			<xs:documentation>A reference to a defined implementation technology specification.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="id" type="artifactIdType" use="required">
				<xs:annotation>
					<xs:documentation>Identifier for the implementation technology specification.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="storyboardModelRef">
		<xs:annotation>
			<xs:documentation>A reference to a particular storyboard model.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="id" type="artifactIdType" use="required">
				<xs:annotation>
					<xs:documentation>The identifier of the storyboard model being referenced.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="dynamicModelRef">
		<xs:annotation>
			<xs:documentation>A reference to a particular dynamic model.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="id" type="artifactIdType" use="required">
				<xs:annotation>
					<xs:documentation>The identifier of the dynamic model being referenced.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="datatypeModelRef">
		<xs:annotation>
			<xs:documentation>A reference to a particular datatype model.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="id" type="artifactIdType" use="required">
				<xs:annotation>
					<xs:documentation>The identifier of the datatype model being referenced.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="vocabularyModelRef">
		<xs:annotation>
			<xs:documentation>A reference to a particular vocabulary model.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="id" type="artifactIdType" use="required">
				<xs:annotation>
					<xs:documentation>The identifier of the vocabulary model being referenced.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="staticModelRef">
		<xs:annotation>
			<xs:documentation>A reference to a particular static model.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="modelId" type="artifactIdType" use="required">
				<xs:annotation>
					<xs:documentation>The identifier of the static model being referenced.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="templateRef">
		<xs:annotation>
			<xs:documentation>A reference to a defined template.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="templateId" type="oidType" use="required">
				<xs:annotation>
					<xs:documentation>Identifier for the referenced template.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="vocabularyDomainRef">
		<xs:annotation>
			<xs:documentation>A reference to a vocabulary domain defined in another model.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="vocabModelId" type="artifactIdType" use="required">
				<xs:annotation>
					<xs:documentation>The unique identifier for the vocabulary model in which the domain is defined.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="name" type="basicFormalNameType" use="required">
				<xs:annotation>
					<xs:documentation>The name of the domain being referenced.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="codeSystemRef">
		<xs:annotation>
			<xs:documentation>A reference to a code system defined in another model.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="vocabModelId" type="artifactIdType" use="required">
				<xs:annotation>
					<xs:documentation>The unique identifier for the vocabulary model in which the code system is defined.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="name" type="basicFormalNameType" use="required">
				<xs:annotation>
					<xs:documentation>The name of the coding system being referenced.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="version" type="versionType" use="required">
				<xs:annotation>
					<xs:documentation>The version of the coding system being referenced.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="vocabularyCodeRef">
		<xs:annotation>
			<xs:documentation>A reference to a vocabulary code defined in another model.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="vocabModelId" type="artifactIdType" use="required">
				<xs:annotation>
					<xs:documentation>The unique identifier for the vocabulary model in which the vocabulary code is defined.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="codeSystemName" type="basicFormalNameType" use="required">
				<xs:annotation>
					<xs:documentation>The for the coding system to which the referenced code belongs.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="code" type="shortDescriptiveNameType" use="required">
				<xs:annotation>
					<xs:documentation>The identifier or mnemonic of the referenced code.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
</xs:schema>
